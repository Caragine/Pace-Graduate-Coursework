// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 *
 * CHANGE FROM BOOK:
 * - if address > 0x6000 (in hexidecimal) is accessed, your logic
 *   must return a 0 value, regardless of whether load is 1 or 0
 * - don't worry about loading a bad value if address > 0x6000;
 *   ignore that complication; just make sure out=0 for these addresses
 * 
 * Access to any address in the range 0x4000-0x5FFF results in
 * accessing the screen memory map. Access to address 0x6000 results
 * in accessing the keyboard memory map. The behavior in these
 * addresses is described in the Screen and Keyboard chip
 * specifications given in the book.
 */


CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
DMux4Way(in=load, sel=address[13..14], a=rama, b=ramb, c=screen, d=keyboard);
Or(a=rama, b=ramb, out=ramor);
RAM16K(in=in, load=ramor, address=address[0..13], out=ram);
Screen(in=in, load=screen, address=address[0..12], out=screenout);
Keyboard(out=keyboardout);
Mux4Way16(a=ram, b=ram, c=screenout, d=screenout, sel=address[13..14], out=mux1out);
Mux16(a=mux1out, b=keyboardout, sel=keyboardselector, out=muxout);
Or13Way(in=address[0..12], out=orout);
Not(in=orout, out=notorout);
And(a=address[14], b=address[13], out=and1out);
And(a=notorout, b=and1out, out=keyboardselector);
And(a=and1out, b=orout, out=invalidmux);
Mux16(a=muxout, b=false, sel=invalidmux, out=out);
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* Required: 16 gates or fewer */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

Not(in=instruction[15], out=notinstruction15);
Or(a=notinstruction15, b=instruction[5], out=aload);
Mux16(a=aluout, b=instruction[0..15], sel=notinstruction15, out=mux1out);

And(a=instruction[15], b=instruction[4], out=dload);

ARegister(in=mux1out, load=aload, out=AReg, out[0..14]=addressM);
//DRegister(in=aluout, load=dload, out=DReg);
DRegister(in=newaluout, load=dload, out=DReg);

Mux16(a=AReg, b=inM, sel=instruction[12], out=mux2out);

//ALU(x=DReg, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);
ALU(x=DReg, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=zr, ng=ng);

Not(in=ng, out=notng);
Not(in=zr, out=notzr);
And(a=notng, b=notzr, out=jgt);
Or(a=ng, b=zr, out=jle);

Mux8Way(a=false, b=jgt, c=zr, d=notng, e=ng, f=notzr, g=jle, h=true, sel=instruction[0..2], out=pcmux);

And(a=instruction[15], b=pcmux, out=pcload);

PC(in=AReg, reset=reset, inc=true, load=pcload, out[0..14]=pc);

And(a=instruction[3], b=instruction[15], out=writeM);

Not(in=instruction[7], out=notinstruction7);
Not(in=instruction[6], out=notinstruction6);

And6Way(in[0]=instruction[6], in[1]=notinstruction7, in[2]=instruction[8], in[3]=instruction[9], in[4]=instruction[10], in[5]=instruction[11], out=lshiftyes);
And6Way(in[0]=notinstruction6, in[1]=instruction[7], in[2]=instruction[8], in[3]=instruction[9], in[4]=instruction[10], in[5]=instruction[11], out=rshiftyes);

LShift(in=DReg, out=LShiftout);
RShift(in=DReg, out=RShiftout);

Mux16(a=aluout, b=LShiftout, sel=lshiftyes, out=lmux);
Mux16(a=lmux, b=RShiftout, sel=rshiftyes, out=newaluout, out=outM);
}
{"ast":null,"code":"import { SET_SEARCH_REQUEST, SET_SEARCH_SUCCESS, SET_SEARCH_FAILURE } from \"./types\";\nimport axios from \"axios\";\n\nfunction delay(t, v) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve.bind(null, v), t);\n  });\n}\n\nexport const asyncSearch = searchData => {\n  return async dispatch => {\n    dispatch(searchRequest(searchData));\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/search\", searchData, {\n        timeout: 10000\n      });\n      console.log(\"search data\", searchData);\n      console.log(\"loggigin\", response);\n      console.log(\"data\", response.data); //         //Set the postings data\n\n      setTimeout(() => {\n        dispatch(setSearch(response.data));\n      }, 3000);\n      return {\n        postings: response.data\n      };\n    } catch (errors) {\n      console.log(\"errors in async login\", errors.request);\n\n      if (errors.message === 'Network Error') {\n        return delay(5000).then(function () {\n          console.log(\"Network Error\", errors);\n          dispatch(networkErrorHandler(errors, SET_SEARCH_FAILURE));\n          return {\n            error: \"Trouble with the network\"\n          };\n        });\n      } else {\n        return delay(5000).then(function () {\n          dispatch(errorHandler(errors, SET_SEARCH_FAILURE));\n\n          if (errors.code === 'ECONNABORTED') {\n            return {\n              error: \"Time out retry again\"\n            };\n          }\n\n          return errors.response.data;\n        });\n      }\n    }\n  };\n};\nexport const searchRequest = data => {\n  return {\n    type: SET_SEARCH_REQUEST,\n    payload: data\n  };\n};\nexport const setSearch = postings => {\n  return {\n    type: SET_SEARCH_SUCCESS,\n    payload: postings\n  };\n}; //Error handler \n\nexport const errorHandler = (errors, type) => {\n  if (errors.code === 'ECONNABORTED') {\n    return {\n      type: type,\n      payload: errors\n    };\n  }\n\n  return {\n    type: type,\n    payload: errors.response.data\n  };\n}; //Network Error handler \n\nexport const networkErrorHandler = (errors, type) => {\n  return {\n    type: type,\n    payload: errors\n  };\n};","map":{"version":3,"sources":["C:/Users/Adam/Documents/PACE/Fall 2020 - Semester 4/CS 691 - Computer Science Project I/jobster-master/jobster-master/code/client/src/actions/coreActions.js"],"names":["SET_SEARCH_REQUEST","SET_SEARCH_SUCCESS","SET_SEARCH_FAILURE","axios","delay","t","v","Promise","resolve","setTimeout","bind","asyncSearch","searchData","dispatch","searchRequest","response","post","timeout","console","log","data","setSearch","postings","errors","request","message","then","networkErrorHandler","error","errorHandler","code","type","payload"],"mappings":"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","sourcesContent":["import {\n    SET_SEARCH_REQUEST,\n    SET_SEARCH_SUCCESS,\n    SET_SEARCH_FAILURE\n} from \"./types\";\n\n\nimport axios from \"axios\";\n\n\n\nfunction delay(t, v) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve.bind(null, v), t)\n    });\n}\n\nexport const asyncSearch = searchData => {\n    return async dispatch => {\n        dispatch(searchRequest(searchData));\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/search\", searchData, { timeout: 10000 });\n            console.log(\"search data\", searchData)\n            console.log(\"loggigin\", response)\n            console.log(\"data\", response.data)\n            //         //Set the postings data\n            setTimeout(() => {\n                dispatch(setSearch(response.data));\n            }, 3000)\n            return { postings: response.data }\n        }\n        catch (errors) {\n            console.log(\"errors in async login\", errors.request);\n            if (errors.message === 'Network Error') {\n                return delay(5000).then(function () {\n                    console.log(\"Network Error\", errors);\n                    dispatch(networkErrorHandler(errors, SET_SEARCH_FAILURE));\n                    return { error: \"Trouble with the network\" };\n                });\n\n            } else {\n                return delay(5000).then(function () {\n                    dispatch(errorHandler(errors, SET_SEARCH_FAILURE));\n                    if (errors.code === 'ECONNABORTED') {\n                        return { error: \"Time out retry again\" }\n                    }\n                    return errors.response.data;\n                });\n            }\n\n        }\n    }\n}\n\nexport const searchRequest = data => {\n    return {\n        type: SET_SEARCH_REQUEST,\n        payload: data\n    };\n};\n\nexport const setSearch = postings => {\n    return {\n        type: SET_SEARCH_SUCCESS,\n        payload: postings\n    };\n};\n\n//Error handler \nexport const errorHandler = (errors, type) => {\n    if (errors.code === 'ECONNABORTED') {\n        return {\n            type: type,\n            payload: errors\n        }\n    }\n    return {\n        type: type,\n        payload: errors.response.data\n    };\n};\n\n//Network Error handler \nexport const networkErrorHandler = (errors, type) => {\n    return {\n        type: type,\n        payload: errors\n    };\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { SET_USER_SIGNUP_REQUEST, SET_USER_SIGNUP_SUCCESS, SET_USER_SIGNUP_FAILURE, SET_PARTNER_SIGNUP_REQUEST, SET_PARTNER_SIGNUP_SUCCESS, SET_PARTNER_SIGNUP_FAILURE, SET_USER_REQUEST, SET_USER_SUCCESS, SET_USER_FAILURE, SET_PARTNER_REQUEST, SET_PARTNER_SUCCESS, SET_PARTNER_FAILURE, USER_LOGOUT, PARTNER_LOGOUT } from \"./types\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nfunction delay(t, v) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve.bind(null, v), t);\n  });\n}\n\nexport const asyncPartnerLogin = userData => {\n  return async dispatch => {\n    dispatch(partnerRequest(userData));\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/p-login\", userData, {\n        timeout: 10000\n      });\n      console.log(\"userdata\", userData);\n      const {\n        token,\n        tkn_type\n      } = response.data;\n      console.log(\"loggigin\", response);\n\n      if (tkn_type === 'partner') {\n        if (token) {\n          console.log(\"Token\", token); //set token to local storage\n\n          localStorage.setItem(\"pt_jwtToken\", token); //set token to auth header\n\n          setAuthToken(token); //Decode Token to get user data\n\n          const decoded = jwt_decode(token); //Set the current user\n\n          setTimeout(() => {\n            dispatch(setCurrentPartner(decoded));\n          }, 3000);\n          return {\n            status: \"logged-in\"\n          };\n        }\n      } // dispatch(setCurrentUser(decoded));\n\n    } catch (errors) {\n      console.log(\"errors in async login\", errors.request);\n\n      if (errors.message === 'Network Error') {\n        return delay(5000).then(function () {\n          console.log(\"Network Error\", errors);\n          dispatch(networkErrorHandler(errors, SET_PARTNER_FAILURE));\n          return {\n            error: \"Trouble with the network\"\n          };\n        });\n      } else {\n        return delay(5000).then(function () {\n          dispatch(errorHandler(errors, SET_PARTNER_FAILURE));\n\n          if (errors.code === 'ECONNABORTED') {\n            return {\n              error: \"Time out retry again\"\n            };\n          }\n\n          return errors.response.data;\n        });\n      }\n    }\n  };\n};\nexport const asyncPartnerRegister = userData => {\n  return async dispatch => {\n    dispatch(userSignupRequest(userData));\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/p-register\", userData, {\n        timeout: 10000\n      });\n      console.log(\"userdata\", userData);\n      const {\n        status\n      } = response.data;\n      console.log(\"loggigin\", response);\n\n      if (status) {\n        //Set the current user\n        setTimeout(() => {\n          dispatch(partnerSignupSuccess());\n        }, 3000);\n        return {\n          status: \"registered\"\n        };\n      }\n    } catch (errors) {\n      console.log(\"errors in async register\", errors.request);\n\n      if (errors.message === 'Network Error') {\n        return delay(5000).then(function () {\n          console.log(\"Network Error\", errors);\n          dispatch(networkErrorHandler(errors, SET_PARTNER_SIGNUP_FAILURE));\n          return {\n            error: \"Trouble with the network\"\n          };\n        });\n      } else {\n        return delay(5000).then(function () {\n          dispatch(errorHandler(errors, SET_PARTNER_SIGNUP_FAILURE));\n\n          if (errors.code === 'ECONNABORTED') {\n            return {\n              error: \"Time out retry again\"\n            };\n          }\n\n          return errors.response.data;\n        });\n      }\n    }\n  };\n};\nexport const asyncPartnerTokenUpdate = userData => {\n  return async dispatch => {\n    dispatch(userRequest(userData));\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/p-tkn-update\", userData, {\n        timeout: 10000\n      });\n      console.log(\"userdata\", userData);\n      const {\n        token,\n        tkn_type\n      } = response.data;\n      console.log(\"loggigin\", response);\n\n      if (tkn_type === 'partner') {\n        if (token) {\n          //set token to local storage\n          localStorage.removeItem(\"pt_jwtToken\");\n          localStorage.removeItem(\"lastUpdtTime\");\n          localStorage.setItem(\"pt_jwtToken\", token);\n          setAuthToken(false); //set token to auth header\n\n          setAuthToken(token); //Decode Token to get user data\n\n          const decoded = jwt_decode(token); //Set the current user\n\n          setTimeout(() => {\n            dispatch(setCurrentPartner(decoded));\n          }, 1500);\n          return {\n            status: \"logged-in\"\n          };\n        }\n      } // dispatch(setCurrentUser(decoded));\n\n    } catch (errors) {\n      console.log(\"errors in async login\", errors.request);\n\n      if (errors.message === 'Network Error') {\n        return delay(5000).then(function () {\n          console.log(\"Network Error\", errors);\n          dispatch(networkErrorHandler(errors, SET_USER_FAILURE));\n          return {\n            error: \"Trouble with the network\"\n          };\n        });\n      } else {\n        return delay(5000).then(function () {\n          dispatch(errorHandler(errors, SET_USER_FAILURE));\n\n          if (errors.code === 'ECONNABORTED') {\n            return {\n              error: \"Time out retry again\"\n            };\n          }\n\n          return errors.response.data;\n        });\n      }\n    }\n  };\n};\nexport const asyncLogin = userData => {\n  return async dispatch => {\n    dispatch(userRequest(userData));\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/login\", userData, {\n        timeout: 10000\n      });\n      console.log(\"userdata\", userData);\n      const {\n        token,\n        tkn_type\n      } = response.data;\n      console.log(\"loggigin\", response);\n\n      if (tkn_type === 'user') {\n        if (token) {\n          //set token to local storage\n          localStorage.setItem(\"jwtToken\", token); //set token to auth header\n\n          setAuthToken(token); //Decode Token to get user data\n\n          const decoded = jwt_decode(token); //Set the current user\n\n          setTimeout(() => {\n            dispatch(setCurrentUser(decoded));\n          }, 3000);\n          return {\n            status: \"logged-in\"\n          };\n        }\n      } // dispatch(setCurrentUser(decoded));\n\n    } catch (errors) {\n      console.log(\"errors in async login\", errors.request);\n\n      if (errors.message === 'Network Error') {\n        return delay(5000).then(function () {\n          console.log(\"Network Error\", errors);\n          dispatch(networkErrorHandler(errors, SET_USER_FAILURE));\n          return {\n            error: \"Trouble with the network\"\n          };\n        });\n      } else {\n        return delay(5000).then(function () {\n          dispatch(errorHandler(errors, SET_USER_FAILURE));\n\n          if (errors.code === 'ECONNABORTED') {\n            return {\n              error: \"Time out retry again\"\n            };\n          }\n\n          return errors.response.data;\n        });\n      }\n    }\n  };\n};\nexport const asyncTokenUpdate = userData => {\n  return async dispatch => {\n    dispatch(userRequest(userData));\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/tkn-update\", userData, {\n        timeout: 10000\n      });\n      console.log(\"userdata\", userData);\n      const {\n        token,\n        tkn_type\n      } = response.data;\n      console.log(\"loggigin\", response);\n\n      if (tkn_type === 'user') {\n        if (token) {\n          //set token to local storage\n          localStorage.removeItem(\"jwtToken\");\n          localStorage.removeItem(\"lastUpdtTime\");\n          localStorage.setItem(\"jwtToken\", token);\n          setAuthToken(false); //set token to auth header\n\n          setAuthToken(token); //Decode Token to get user data\n\n          const decoded = jwt_decode(token); //Set the current user\n\n          setTimeout(() => {\n            dispatch(setCurrentUser(decoded));\n          }, 1500);\n          return {\n            status: \"logged-in\"\n          };\n        }\n      } // dispatch(setCurrentUser(decoded));\n\n    } catch (errors) {\n      console.log(\"errors in async login\", errors.request);\n\n      if (errors.message === 'Network Error') {\n        return delay(5000).then(function () {\n          console.log(\"Network Error\", errors);\n          dispatch(networkErrorHandler(errors, SET_USER_FAILURE));\n          return {\n            error: \"Trouble with the network\"\n          };\n        });\n      } else {\n        return delay(5000).then(function () {\n          dispatch(errorHandler(errors, SET_USER_FAILURE));\n\n          if (errors.code === 'ECONNABORTED') {\n            return {\n              error: \"Time out retry again\"\n            };\n          }\n\n          return errors.response.data;\n        });\n      }\n    }\n  };\n};\nexport const asyncRegister = userData => {\n  return async dispatch => {\n    dispatch(userSignupRequest(userData));\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/register\", userData, {\n        timeout: 10000\n      });\n      console.log(\"userdata\", userData);\n      const {\n        status\n      } = response.data;\n      console.log(\"loggigin\", response);\n\n      if (status) {\n        //Set the current user\n        setTimeout(() => {\n          dispatch(userSignupSuccess());\n        }, 3000);\n        return {\n          status: \"registered\"\n        };\n      }\n    } catch (errors) {\n      console.log(\"errors in async register\", errors.request);\n\n      if (errors.message === 'Network Error') {\n        return delay(5000).then(function () {\n          console.log(\"Network Error\", errors);\n          dispatch(networkErrorHandler(errors, SET_USER_SIGNUP_FAILURE));\n          return {\n            error: \"Trouble with the network\"\n          };\n        });\n      } else {\n        return delay(5000).then(function () {\n          dispatch(errorHandler(errors, SET_USER_SIGNUP_FAILURE));\n\n          if (errors.code === 'ECONNABORTED') {\n            return {\n              error: \"Time out retry again\"\n            };\n          }\n\n          return errors.response.data;\n        });\n      }\n    }\n  };\n}; //Network Error handler \n\nexport const networkErrorHandler = (errors, type) => {\n  return {\n    type: type,\n    payload: errors\n  };\n}; //Error handler \n\nexport const errorHandler = (errors, type) => {\n  if (errors.code === 'ECONNABORTED') {\n    return {\n      type: type,\n      payload: errors\n    };\n  }\n\n  return {\n    type: type,\n    payload: errors.response.data\n  };\n}; //Set loggedin user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_USER_SUCCESS,\n    payload: decoded\n  };\n};\nexport const userRequest = data => {\n  return {\n    type: SET_USER_REQUEST,\n    payload: data\n  };\n};\nexport const partnerRequest = data => {\n  return {\n    type: SET_PARTNER_REQUEST,\n    payload: data\n  };\n};\nexport const setCurrentPartner = decoded => {\n  return {\n    type: SET_PARTNER_SUCCESS,\n    payload: decoded\n  };\n};\nexport const partnerSignupRequest = data => {\n  return {\n    type: SET_PARTNER_SIGNUP_REQUEST,\n    payload: data\n  };\n};\nexport const partnerSignupSuccess = () => {\n  return {\n    type: SET_PARTNER_SIGNUP_SUCCESS //payload: decoded\n\n  };\n};\nexport const userSignupRequest = data => {\n  return {\n    type: SET_USER_SIGNUP_REQUEST,\n    payload: data\n  };\n};\nexport const userSignupSuccess = () => {\n  return {\n    type: SET_USER_SIGNUP_SUCCESS //payload: decoded\n\n  };\n};\nexport const clearStore = () => {\n  return {\n    type: USER_LOGOUT\n  };\n};\nexport const clearPartnerStore = () => {\n  return {\n    type: PARTNER_LOGOUT\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  try {\n    if (localStorage.jwtToken) {\n      // Remove token from localStorage\n      //localStorage.removeItem(\"decoded\");\n      // Remove auth header for future requests\n      setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n      dispatch(setCurrentUser({})); //reset the store to default value\n\n      dispatch(clearStore());\n      localStorage.removeItem(\"jwtToken\");\n      localStorage.removeItem(\"lastUpdtTime\"); //window.location.href = \"/login\";\n    }\n  } catch (errors) {\n    console.log(\"jjj\", errors);\n  }\n}; // Log user out\n\nexport const logoutPartner = () => dispatch => {\n  try {\n    if (localStorage.pt_jwtToken) {\n      // Remove token from localStorage\n      //localStorage.removeItem(\"decoded\");\n      // Remove auth header for future requests\n      setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n      dispatch(setCurrentPartner({})); //reset the store to default value\n\n      dispatch(clearPartnerStore());\n      localStorage.removeItem(\"pt_jwtToken\");\n      localStorage.removeItem(\"lastUpdtTime\"); //window.location.href = \"/login\";\n    }\n  } catch (errors) {\n    console.log(\"jjj\", errors);\n  }\n};","map":{"version":3,"sources":["C:/Users/Adam/Documents/PACE/Fall 2020 - Semester 4/CS 691 - Computer Science Project I/jobster-master/jobster-master/code/client/src/actions/authActions.js"],"names":["SET_USER_SIGNUP_REQUEST","SET_USER_SIGNUP_SUCCESS","SET_USER_SIGNUP_FAILURE","SET_PARTNER_SIGNUP_REQUEST","SET_PARTNER_SIGNUP_SUCCESS","SET_PARTNER_SIGNUP_FAILURE","SET_USER_REQUEST","SET_USER_SUCCESS","SET_USER_FAILURE","SET_PARTNER_REQUEST","SET_PARTNER_SUCCESS","SET_PARTNER_FAILURE","USER_LOGOUT","PARTNER_LOGOUT","axios","setAuthToken","jwt_decode","delay","t","v","Promise","resolve","setTimeout","bind","asyncPartnerLogin","userData","dispatch","partnerRequest","response","post","timeout","console","log","token","tkn_type","data","localStorage","setItem","decoded","setCurrentPartner","status","errors","request","message","then","networkErrorHandler","error","errorHandler","code","asyncPartnerRegister","userSignupRequest","partnerSignupSuccess","asyncPartnerTokenUpdate","userRequest","removeItem","asyncLogin","setCurrentUser","asyncTokenUpdate","asyncRegister","userSignupSuccess","type","payload","partnerSignupRequest","clearStore","clearPartnerStore","logoutUser","jwtToken","logoutPartner","pt_jwtToken"],"mappings":"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","sourcesContent":["import {\n    SET_USER_SIGNUP_REQUEST,\n    SET_USER_SIGNUP_SUCCESS,\n    SET_USER_SIGNUP_FAILURE,\n    SET_PARTNER_SIGNUP_REQUEST,\n    SET_PARTNER_SIGNUP_SUCCESS,\n    SET_PARTNER_SIGNUP_FAILURE,\n    SET_USER_REQUEST,\n    SET_USER_SUCCESS,\n    SET_USER_FAILURE,\n    SET_PARTNER_REQUEST,\n    SET_PARTNER_SUCCESS,\n    SET_PARTNER_FAILURE,\n    USER_LOGOUT,\n    PARTNER_LOGOUT\n} from \"./types\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\n\nfunction delay(t, v) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve.bind(null, v), t)\n    });\n}\n\n\nexport const asyncPartnerLogin = userData => {\n    return async dispatch => {\n        dispatch(partnerRequest(userData));\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/p-login\", userData, { timeout: 10000 });\n            console.log(\"userdata\", userData)\n            const { token, tkn_type } = response.data;\n            console.log(\"loggigin\", response)\n            if (tkn_type === 'partner') {\n                if (token) {\n                    console.log(\"Token\", token)\n                    //set token to local storage\n                    localStorage.setItem(\"pt_jwtToken\", token);\n                    //set token to auth header\n                    setAuthToken(token);\n                    //Decode Token to get user data\n                    const decoded = jwt_decode(token);\n                    //Set the current user\n                    setTimeout(() => {\n                        dispatch(setCurrentPartner(decoded));\n                    }, 3000)\n                    return { status: \"logged-in\" }\n                }\n            }\n            // dispatch(setCurrentUser(decoded));\n        }\n\n        catch (errors) {\n            console.log(\"errors in async login\", errors.request);\n            if (errors.message === 'Network Error') {\n                return delay(5000).then(function () {\n                    console.log(\"Network Error\", errors);\n                    dispatch(networkErrorHandler(errors, SET_PARTNER_FAILURE));\n                    return { error: \"Trouble with the network\" };\n                });\n\n            } else {\n                return delay(5000).then(function () {\n                    dispatch(errorHandler(errors, SET_PARTNER_FAILURE));\n                    if (errors.code === 'ECONNABORTED') {\n                        return { error: \"Time out retry again\" }\n                    }\n                    return errors.response.data;\n                });\n            }\n\n        }\n    }\n}\n\nexport const asyncPartnerRegister = userData => {\n    return async dispatch => {\n        dispatch(userSignupRequest(userData));\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/p-register\", userData, { timeout: 10000 });\n            console.log(\"userdata\", userData)\n            const { status } = response.data;\n            console.log(\"loggigin\", response)\n            if (status) {\n                //Set the current user\n                setTimeout(() => {\n                    dispatch(partnerSignupSuccess());\n                }, 3000)\n                return { status: \"registered\" }\n            }\n        }\n\n        catch (errors) {\n            console.log(\"errors in async register\", errors.request);\n            if (errors.message === 'Network Error') {\n                return delay(5000).then(function () {\n                    console.log(\"Network Error\", errors);\n                    dispatch(networkErrorHandler(errors, SET_PARTNER_SIGNUP_FAILURE));\n                    return { error: \"Trouble with the network\" };\n                });\n\n            } else {\n                return delay(5000).then(function () {\n                    dispatch(errorHandler(errors, SET_PARTNER_SIGNUP_FAILURE));\n                    if (errors.code === 'ECONNABORTED') {\n                        return { error: \"Time out retry again\" }\n                    }\n                    return errors.response.data;\n                });\n            }\n\n        }\n    }\n}\n\nexport const asyncPartnerTokenUpdate = userData => {\n    return async dispatch => {\n        dispatch(userRequest(userData));\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/p-tkn-update\", userData, { timeout: 10000 });\n            console.log(\"userdata\", userData)\n            const { token, tkn_type } = response.data;\n            console.log(\"loggigin\", response)\n            if (tkn_type === 'partner') {\n                if (token) {\n                    //set token to local storage\n                    localStorage.removeItem(\"pt_jwtToken\");\n                    localStorage.removeItem(\"lastUpdtTime\");\n                    localStorage.setItem(\"pt_jwtToken\", token);\n                    setAuthToken(false);\n                    //set token to auth header\n                    setAuthToken(token);\n                    //Decode Token to get user data\n                    const decoded = jwt_decode(token);\n                    //Set the current user\n                    setTimeout(() => {\n                        dispatch(setCurrentPartner(decoded));\n                    }, 1500)\n                    return { status: \"logged-in\" }\n                }\n            }\n            // dispatch(setCurrentUser(decoded));\n        }\n\n        catch (errors) {\n            console.log(\"errors in async login\", errors.request);\n            if (errors.message === 'Network Error') {\n                return delay(5000).then(function () {\n                    console.log(\"Network Error\", errors);\n                    dispatch(networkErrorHandler(errors, SET_USER_FAILURE));\n                    return { error: \"Trouble with the network\" };\n                });\n\n            } else {\n                return delay(5000).then(function () {\n                    dispatch(errorHandler(errors, SET_USER_FAILURE));\n                    if (errors.code === 'ECONNABORTED') {\n                        return { error: \"Time out retry again\" }\n                    }\n                    return errors.response.data;\n                });\n            }\n\n        }\n    }\n}\n\n\n\nexport const asyncLogin = userData => {\n    return async dispatch => {\n        dispatch(userRequest(userData));\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/login\", userData, { timeout: 10000 });\n            console.log(\"userdata\", userData)\n            const { token, tkn_type } = response.data;\n            console.log(\"loggigin\", response)\n            if (tkn_type === 'user') {\n                if (token) {\n                    //set token to local storage\n                    localStorage.setItem(\"jwtToken\", token);\n                    //set token to auth header\n                    setAuthToken(token);\n                    //Decode Token to get user data\n                    const decoded = jwt_decode(token);\n                    //Set the current user\n                    setTimeout(() => {\n                        dispatch(setCurrentUser(decoded));\n                    }, 3000)\n                    return { status: \"logged-in\" }\n                }\n            }\n            // dispatch(setCurrentUser(decoded));\n        }\n\n        catch (errors) {\n            console.log(\"errors in async login\", errors.request);\n            if (errors.message === 'Network Error') {\n                return delay(5000).then(function () {\n                    console.log(\"Network Error\", errors);\n                    dispatch(networkErrorHandler(errors, SET_USER_FAILURE));\n                    return { error: \"Trouble with the network\" };\n                });\n\n            } else {\n                return delay(5000).then(function () {\n                    dispatch(errorHandler(errors, SET_USER_FAILURE));\n                    if (errors.code === 'ECONNABORTED') {\n                        return { error: \"Time out retry again\" }\n                    }\n                    return errors.response.data;\n                });\n            }\n\n        }\n    }\n}\n\n\nexport const asyncTokenUpdate = userData => {\n    return async dispatch => {\n        dispatch(userRequest(userData));\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/tkn-update\", userData, { timeout: 10000 });\n            console.log(\"userdata\", userData)\n            const { token, tkn_type } = response.data;\n            console.log(\"loggigin\", response)\n            if (tkn_type === 'user') {\n                if (token) {\n                    //set token to local storage\n                    localStorage.removeItem(\"jwtToken\");\n                    localStorage.removeItem(\"lastUpdtTime\");\n                    localStorage.setItem(\"jwtToken\", token);\n                    setAuthToken(false);\n                    //set token to auth header\n                    setAuthToken(token);\n                    //Decode Token to get user data\n                    const decoded = jwt_decode(token);\n                    //Set the current user\n                    setTimeout(() => {\n                        dispatch(setCurrentUser(decoded));\n                    }, 1500)\n                    return { status: \"logged-in\" }\n                }\n            }\n            // dispatch(setCurrentUser(decoded));\n        }\n\n        catch (errors) {\n            console.log(\"errors in async login\", errors.request);\n            if (errors.message === 'Network Error') {\n                return delay(5000).then(function () {\n                    console.log(\"Network Error\", errors);\n                    dispatch(networkErrorHandler(errors, SET_USER_FAILURE));\n                    return { error: \"Trouble with the network\" };\n                });\n\n            } else {\n                return delay(5000).then(function () {\n                    dispatch(errorHandler(errors, SET_USER_FAILURE));\n                    if (errors.code === 'ECONNABORTED') {\n                        return { error: \"Time out retry again\" }\n                    }\n                    return errors.response.data;\n                });\n            }\n\n        }\n    }\n}\n\n\nexport const asyncRegister = userData => {\n    return async dispatch => {\n        dispatch(userSignupRequest(userData));\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/register\", userData, { timeout: 10000 });\n            console.log(\"userdata\", userData)\n            const { status } = response.data;\n            console.log(\"loggigin\", response)\n            if (status) {\n                //Set the current user\n                setTimeout(() => {\n                    dispatch(userSignupSuccess());\n                }, 3000)\n                return { status: \"registered\" }\n            }\n        }\n\n        catch (errors) {\n            console.log(\"errors in async register\", errors.request);\n            if (errors.message === 'Network Error') {\n                return delay(5000).then(function () {\n                    console.log(\"Network Error\", errors);\n                    dispatch(networkErrorHandler(errors, SET_USER_SIGNUP_FAILURE));\n                    return { error: \"Trouble with the network\" };\n                });\n\n            } else {\n                return delay(5000).then(function () {\n                    dispatch(errorHandler(errors, SET_USER_SIGNUP_FAILURE));\n                    if (errors.code === 'ECONNABORTED') {\n                        return { error: \"Time out retry again\" }\n                    }\n                    return errors.response.data;\n                });\n            }\n\n        }\n    }\n}\n\n\n//Network Error handler \nexport const networkErrorHandler = (errors, type) => {\n    return {\n        type: type,\n        payload: errors\n    };\n};\n\n\n\n//Error handler \nexport const errorHandler = (errors, type) => {\n    if (errors.code === 'ECONNABORTED') {\n        return {\n            type: type,\n            payload: errors\n        }\n    }\n    return {\n        type: type,\n        payload: errors.response.data\n    };\n};\n\n//Set loggedin user\n\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_USER_SUCCESS,\n        payload: decoded\n    };\n};\n\nexport const userRequest = data => {\n    return {\n        type: SET_USER_REQUEST,\n        payload: data\n    };\n};\n\n\nexport const partnerRequest = data => {\n    return {\n        type: SET_PARTNER_REQUEST,\n        payload: data\n    };\n};\n\nexport const setCurrentPartner = decoded => {\n    return {\n        type: SET_PARTNER_SUCCESS,\n        payload: decoded\n    };\n};\n\nexport const partnerSignupRequest = data => {\n    return {\n        type: SET_PARTNER_SIGNUP_REQUEST,\n        payload: data\n    };\n};\n\nexport const partnerSignupSuccess = () => {\n    return {\n        type: SET_PARTNER_SIGNUP_SUCCESS,\n        //payload: decoded\n    };\n};\n\nexport const userSignupRequest = data => {\n    return {\n        type: SET_USER_SIGNUP_REQUEST,\n        payload: data\n    };\n};\n\nexport const userSignupSuccess = () => {\n    return {\n        type: SET_USER_SIGNUP_SUCCESS,\n        //payload: decoded\n    };\n};\n\nexport const clearStore = () => {\n    return {\n        type: USER_LOGOUT\n    };\n}\n\nexport const clearPartnerStore = () => {\n    return {\n        type: PARTNER_LOGOUT\n    };\n}\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    try {\n        if (localStorage.jwtToken) {\n            // Remove token from localStorage\n\n            //localStorage.removeItem(\"decoded\");\n            // Remove auth header for future requests\n            setAuthToken(false);\n            // Set current user to {} which will set isAuthenticated to false\n            dispatch(setCurrentUser({}));\n            //reset the store to default value\n            dispatch(clearStore());\n            localStorage.removeItem(\"jwtToken\");\n            localStorage.removeItem(\"lastUpdtTime\");\n            //window.location.href = \"/login\";\n        }\n    }\n    catch (errors) {\n        console.log(\"jjj\", errors)\n    }\n};\n\n// Log user out\nexport const logoutPartner = () => dispatch => {\n    try {\n        if (localStorage.pt_jwtToken) {\n            // Remove token from localStorage\n\n            //localStorage.removeItem(\"decoded\");\n            // Remove auth header for future requests\n            setAuthToken(false);\n            // Set current user to {} which will set isAuthenticated to false\n            dispatch(setCurrentPartner({}));\n            //reset the store to default value\n            dispatch(clearPartnerStore());\n            localStorage.removeItem(\"pt_jwtToken\");\n            localStorage.removeItem(\"lastUpdtTime\");\n            //window.location.href = \"/login\";\n        }\n    }\n    catch (errors) {\n        console.log(\"jjj\", errors)\n    }\n};\n"]},"metadata":{},"sourceType":"module"}